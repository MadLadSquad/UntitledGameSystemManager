cmake_minimum_required(VERSION 3.19)

if (APPLE)
    message(FATAL_ERROR "You're currently working on an Apple machine! Apple and their platforms are not supported, if
you wish to help with adding support for apple devices, please make pull request on the main engine repository as well
as on the UVKBuildTool repository(this file is generated by it!) and consider maintaining the apple builds!")
endif()

project(UntitledImGuiFramework)
project(UntitledLinuxGameManager)

set(CMAKE_CXX_STANDARD 20)

add_subdirectory(Framework/ThirdParty/glfw)
add_subdirectory(Framework/ThirdParty/glew)
set(BUILD_SHARED_LIBS ON)
add_subdirectory(Framework/ThirdParty/yaml-cpp)
set(BUILD_SHARED_LIBS OFF)

option(USE_AUDIO_MODULE "Use the audio module" OFF)
option(USE_LOCALE_MODULE "Use the locale module" OFF)
option(USE_NETWORKING_MODULE "Use the networking module" OFF)   # Not functional right now
option(USE_PLOTTING_MODULE "Use the plotting module" OFF)
option(USE_UNDO_MODULE "Use the Undo/Redo module" OFF)          # Not functional right now
option(USE_VIDEO_MODULE "Use the video module" OFF)             # Not functional right now

include_directories(Source/)
include_directories(Framework/)
include_directories(Framework/ThirdParty/imgui/backends/everything/)
include_directories(Framework/ThirdParty/imgui/backends/Vulkan/)
include_directories(Framework/ThirdParty/imgui/misc/)
include_directories(Framework/ThirdParty/glfw/include)
include_directories(Framework/ThirdParty/glew/include)
include_directories(Framework/ThirdParty/imgui/backends/everything)
include_directories(Framework/ThirdParty/imgui/)
include_directories(Framework/Core/)
include_directories(Framework/Renderer/)
include_directories(Framework/ThirdParty/logger/src/)
include_directories(Framework/ThirdParty/source-libraries/)
include_directories(Framework/ThirdParty/yaml-cpp/include)
include_directories(Framework/ThirdParty/yaml-cpp/include/yaml-cpp)

link_directories(ThirdParty/glew/lib)
link_directories(UVKBuildTool/build)

file(GLOB_RECURSE UGUI_SRC "Framework/Core/*.cpp" "Framework/Renderer/*.cpp"
        "Framework/ThirdParty/imgui/backends/everything/*.cpp" "Framework/ThirdParty/imgui/misc/cpp/*.cpp"
        "Framework/ThirdParty/logger/*.cpp" "Framework/ThirdParty/source-libraries/*.cpp"
        "Framework/Modules/Audio/src/*.cpp" "Framework/Modules/Locale/src/*.cpp" "Source/*.cpp")
file(GLOB_RECURSE UGUI_HEAD "Framework/Core/*.hpp" "Framework/Renderer/*.hpp"
        "Framework/ThirdParty/imgui/backends/everything/*.h" "Framework/ThirdParty/imgui/misc/cpp/*.h"
        "Framework/ThirdParty/logger/*.h" "Framework/ThirdParty/source-libraries/*.h"
        "Framework/ThirdParty/source-libraries/*.hpp" "Framework/Modules/Audio/src/*.hpp"
        "Framework/Modules/Locale/src/*.hpp" "Source/*.hpp")
file(GLOB_RECURSE EXEC_SRC "Framework/ThirdParty/logger/*.cpp")

if (USE_PLOTTING_MODULE)
    file(GLOB_RECURSE UGUI_IMPLOT_SRC "Framework/Modules/Plotting/*.cpp")
    file(GLOB_RECURSE UGUI_IMPLOT_HEAD "Framework/Modules/Plotting/*.hpp")
else()
    file(GLOB_RECURSE UGUI_IMPLOT_SRC )
    file(GLOB_RECURSE UGUI_IMPLOT_HEAD )
endif()

add_library(UntitledImGuiFramework SHARED ${UGUI_SRC} ${UGUI_HEAD} Generated/BuildDef.hpp ${UGUI_IMPLOT_SRC} ${UGUI_IMPLOT_HEAD})
add_executable(UntitledLinuxGameManager Generated/main.cpp ${UGUI_HEAD} ${EXEC_SRC} Generated/BuildDef.hpp ${UGUI_IMPLOT_HEAD})

set_target_properties(UntitledImGuiFramework PROPERTIES LINKER_LANGUAGE CXX)
set_target_properties(UntitledLinuxGameManager PROPERTIES LINKER_LANGUAGE CXX)

if (USE_AUDIO_MODULE)
    target_compile_definitions(UntitledImGuiFramework PRIVATE "UIMGUI_AUDIO_MODULE_ENABLED")
    target_compile_definitions(UntitledLinuxGameManager PRIVATE "UIMGUI_AUDIO_MODULE_ENABLED")
endif()

if (USE_LOCALE_MODULE)
    target_compile_definitions(UntitledImGuiFramework PRIVATE "UIMGUI_LOCALE_MODULE_ENABLED")
    target_compile_definitions(UntitledLinuxGameManager PRIVATE "UIMGUI_LOCALE_MODULE_ENABLED")
endif()

if (USE_PLOTTING_MODULE)
    target_compile_definitions(UntitledImGuiFramework PRIVATE "UIMGUI_PLOTTING_MODULE_ENABLED")
    target_compile_definitions(UntitledLinuxGameManager PRIVATE "UIMGUI_PLOTTING_MODULE_ENABLED")
endif()
target_compile_definitions(UntitledImGuiFramework PRIVATE "UIMGUI_COMPILE_LIB" "YAML_CPP_DLL")

if (WIN32)
    target_link_libraries(UntitledImGuiFramework glfw opengl32 libglew_static yaml-cpp)
    target_link_libraries(UntitledLinuxGameManager UntitledImGuiFramework yaml-cpp)
else()
    target_link_libraries(UntitledImGuiFramework glfw GLEW OpenGL util pthread yaml-cpp)
    target_link_libraries(UntitledLinuxGameManager UntitledImGuiFramework yaml-cpp )
endif()

